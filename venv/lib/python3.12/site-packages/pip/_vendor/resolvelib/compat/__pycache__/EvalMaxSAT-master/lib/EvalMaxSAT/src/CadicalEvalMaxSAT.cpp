#include "CadicalEvalMaxSAT.hpp"
#include "cadicalinterface.h"
#include "EvalMaxSAT.h"
namespace Eval
{
  CadicalEvalMaxSAT::CadicalEvalMaxSAT()
  {
    monMaxSat = new EvalMaxSAT<Solver_cadical>();
  }
  CadicalEvalMaxSAT::~CadicalEvalMaxSAT()
  {
    EvalMaxSAT<Solver_cadical> *monMaxSat = (EvalMaxSAT<Solver_cadical> *)this->monMaxSat;
    delete monMaxSat;
    this->monMaxSat = nullptr;
  }
  void CadicalEvalMaxSAT::setCoef(double initialCoef, double coefOnRefTime)
  {
    EvalMaxSAT<Solver_cadical> *monMaxSat = (EvalMaxSAT<Solver_cadical> *)this->monMaxSat;
    monMaxSat->setCoef(initialCoef, coefOnRefTime);
  }

  void CadicalEvalMaxSAT::setTargetComputationTime(double targetComputationTime)
  {
    EvalMaxSAT<Solver_cadical> *monMaxSat = (EvalMaxSAT<Solver_cadical> *)this->monMaxSat;
    monMaxSat->setTargetComputationTime(targetComputationTime);
  }

  void CadicalEvalMaxSAT::setBoundRefTime(double minimalRefTime, double maximalRefTime)
  {
    EvalMaxSAT<Solver_cadical> *monMaxSat = (EvalMaxSAT<Solver_cadical> *)this->monMaxSat;
    monMaxSat->setBoundRefTime(minimalRefTime, maximalRefTime);
  }

  void CadicalEvalMaxSAT::unactivateDelayStrategy()
  {
    EvalMaxSAT<Solver_cadical> *monMaxSat = (EvalMaxSAT<Solver_cadical> *)this->monMaxSat;
    monMaxSat->unactivateDelayStrategy();
  }

  void CadicalEvalMaxSAT::unactivateMultiSolveStrategy()
  {
    EvalMaxSAT<Solver_cadical> *monMaxSat = (EvalMaxSAT<Solver_cadical> *)this->monMaxSat;
    monMaxSat->unactivateMultiSolveStrategy();
  }

  void CadicalEvalMaxSAT::unactivateUBStrategy()
  {
    EvalMaxSAT<Solver_cadical> *monMaxSat = (EvalMaxSAT<Solver_cadical> *)this->monMaxSat;
    monMaxSat->unactivateUBStrategy();
  }

  bool CadicalEvalMaxSAT::isWeighted()
  {
    EvalMaxSAT<Solver_cadical> *monMaxSat = (EvalMaxSAT<Solver_cadical> *)this->monMaxSat;
    return monMaxSat->isWeighted();
  }

  int CadicalEvalMaxSAT::newVar(bool decisionVar)
  {
    EvalMaxSAT<Solver_cadical> *monMaxSat = (EvalMaxSAT<Solver_cadical> *)this->monMaxSat;
    return monMaxSat->newVar(decisionVar);
  }

  int CadicalEvalMaxSAT::newSoftVar(bool value, long long weight)
  {
    EvalMaxSAT<Solver_cadical> *monMaxSat = (EvalMaxSAT<Solver_cadical> *)this->monMaxSat;
    return monMaxSat->newSoftVar(value, weight);
  }
  unsigned int CadicalEvalMaxSAT::nVars()
  {
    EvalMaxSAT<Solver_cadical> *monMaxSat = (EvalMaxSAT<Solver_cadical> *)this->monMaxSat;
    return monMaxSat->nVars();
  }

  int CadicalEvalMaxSAT::addClause(const int ps[], size_t length, long w)
  {
    EvalMaxSAT<Solver_cadical> *monMaxSat = (EvalMaxSAT<Solver_cadical> *)this->monMaxSat;
    std::vector<int> clause;
    for (size_t i = 0; i < length; i++)
    {
      int lit = ps[i];
      while (abs(lit) > monMaxSat->nVars())
        monMaxSat->newVar();
      clause.push_back(lit);
    }
    std::optional<long long> ww = {};
    if (w > 0)
    {
      ww = w;
    }

    return monMaxSat->addClause(clause, ww);
  }

  bool CadicalEvalMaxSAT::getValue(int lit)
  {
    EvalMaxSAT<Solver_cadical> *monMaxSat = (EvalMaxSAT<Solver_cadical> *)this->monMaxSat;
    return monMaxSat->getValue(lit);
  }

  bool CadicalEvalMaxSAT::solve()
  {
    EvalMaxSAT<Solver_cadical> *monMaxSat = (EvalMaxSAT<Solver_cadical> *)this->monMaxSat;
    return monMaxSat->solve();
  }

  void CadicalEvalMaxSAT::addWeight(int lit, long long weight)
  {
    EvalMaxSAT<Solver_cadical> *monMaxSat = (EvalMaxSAT<Solver_cadical> *)this->monMaxSat;
    monMaxSat->addWeight(lit, weight);
  }

  void CadicalEvalMaxSAT::setNInputVars(unsigned int nInputVars)
  {
    EvalMaxSAT<Solver_cadical> *monMaxSat = (EvalMaxSAT<Solver_cadical> *)this->monMaxSat;
    monMaxSat->setNInputVars(nInputVars);
  }

};
